source("cachematrix.R")
M = cbind(c(0,1),c(1,0))
M
makeCacheMatrix(M)
x <- makeCacheMatrix()
x$set(M)
x$get()
cacheSolve(x)
M^2
M%*%M
A <- cbind(c(1,4,2), c(2,8,6), c(1,4,0))
y <- makeCacheMatrix()
y$set(A)
y$get()
cacheSolve(y)
A <- cbind(c(1,4,2), c(2,8,6), c(1,12,0))
y <- makeCacheMatrix()
y$set(A)
y$get()
cacheSolve(y)
y$getinv()
cacheSolve(y)
source('~/Github/datasciencecoursera/R_Programming/R_Programming_Week4/R_Programming_Quiz_4.R', echo=TRUE)
source('~/Github/datasciencecoursera/R_Programming/R_Programming_Week4/R_Programming_Quiz_4.R', echo=TRUE)
source('~/Github/datasciencecoursera/R_Programming/R_Programming_Week4/R_Programming_Quiz_4.R', echo=TRUE)
?cpois
?dpois
source('~/Github/datasciencecoursera/R_Programming/R_Programming_Week4/R_Programming_Quiz_4.R', echo=TRUE)
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?system.time
?proc.time
getwd()
setwd("~/Github/datasciencecoursera/R_Programming/R_Programming_Week4")
source('~/Github/datasciencecoursera/R_Programming/R_Programming_Week4/R_Progamming_Assignment_3.R', echo=TRUE)
ncol(outcome)
# Make a histogram of the 30-day-death rates
# from heart attack (column 11)
outcome[, 11] <- as.numeric(outcome[, 11])
# You may get a warning about NAs being introduced; that is okay
hist(outcome[, 11])
summary(outcome)
?stop
colnames(outcome)
outcome$State
?%in%
?select
outcome <- "heart attack"
state <- "GA"
outcome_data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that the state and outcome are valid
try(if(!(state %in% outcome_data$state)) stop("invalid state"))
try(if(!(outcome %in% c("heart failure","heart attack", "pneumonia"))){
stop("invalid outcome")})
## Return hospital name in that state with lowest 30-day death rate
outcome_data %>% filter(State == state) -> state_outcome_data
if(outcome == "heart attack"){
state_outcome_data %>% select(c(V2, V11)) -> hospital_outcome
}
outcome_data$State
outcome_data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that the state and outcome are valid
try(if(!(state %in% outcome_data$State)) stop("invalid state"))
try(if(!(outcome %in% c("heart failure","heart attack", "pneumonia"))){
stop("invalid outcome")})
## Return hospital name in that state with lowest 30-day death rate
outcome_data %>% filter(State == state) -> state_outcome_data
if(outcome == "heart attack"){
state_outcome_data %>% select(c(2, 11)) -> hospital_outcome
}
}
outcome_data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that the state and outcome are valid
try(if(!(state %in% outcome_data$State)) stop("invalid state"))
try(if(!(outcome %in% c("heart failure","heart attack", "pneumonia"))){
stop("invalid outcome")})
## Return hospital name in that state with lowest 30-day death rate
outcome_data %>% filter(State == state) -> state_outcome_data
if(outcome == "heart attack"){
state_outcome_data %>% select(c(2, 11)) -> hospital_outcome
}
head(hospital_outcome)
hospital_outcome %>% arrange(desc(2))
hospital_outcome %>% rename(Mort = Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
hospital_outcome %>% rename(Mort = Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>% arrange(desc(Mort)) %>% head(5)
hospital_outcome %>% mutate(Mort = as.numeric(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)) %>% filter(is.na(Mort) == FALSE)
hospital_outcome %>% mutate(Mort = as.numeric(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)) %>% filter(is.na(Mort) == FALSE) %>% arrange(desc(Mort)) %>% head(5)
hospital_outcome %>% rename(Mort = as.numeric(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)) %>% filter(is.na(Mort) == FALSE) %>% arrange(desc(Mort)) %>% head(5)
state_outcome_data %>%
rename(Mort = Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>%
select(c(2, 11)) %>% mutate(Mort = as.numeric(Mort)) %>%
filter(!is.na(Mort)) %>% arrange(desc(Mort)) %>%
head(5)
state_outcome_data %>%
rename(Mort = Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) %>%
select(c(2, 11)) %>% mutate(Mort = as.numeric(Mort)) %>%
filter(!is.na(Mort)) %>% arrange(desc(Mort), Hospital.Name) %>%
head(5)
colnames(state_outcome_data)
getwd()
source("R_Progamming_Assignment_3.R")
source("R_Progamming_Assignment_3.R")
best("TX", "heart attack")
source("R_Progamming_Assignment_3.R")
best("TX", "heart attack")
source("R_Progamming_Assignment_3.R")
best("TX", "heart attack")
best("TX", "heart failure")
out_hospitals
best("MD", "heart attack")
best("MD", "pneumonia")
source("R_Progamming_Assignment_3.R")
best("TX", "heart failure")
outcome_data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
outcome_data %>% filter(State == "TX")
outcome_data %>% filter(State == "TX") %>% select(2,17)
outcome_data %>% filter(State == "TX") %>% select(2,17) %>% rename(Mort = Hospital.30.Day.Death..Mortality.Rates.from.Heart.Failure)
outcome_data %>% filter(State == "TX") %>% select(2,17) %>% rename(Mort = Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
outcome_data %>% filter(State == "TX") %>% select(2,17) %>% rename(Mort = Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) %>% arrange(Mort)
outcome_data %>% filter(State == "TX") %>% select(2,17) %>% rename(Mort = Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) %>% arrange(as.numeric(Mort))
?as.numeric
source("R_Progamming_Assignment_3.R")
best("TX", "heart failure")
source("R_Progamming_Assignment_3.R")
source("R_Progamming_Assignment_3.R")
best("TX", "heart attack")
source("R_Progamming_Assignment_3.R")
best("TX", "heart failure")
as.numeric("10.1")
best("TX", "pneumonia")
source("R_Progamming_Assignment_3.R")
best("TX", "pneumonia")
source("R_Progamming_Assignment_3.R")
best("TX", "pneumonia")
source("R_Progamming_Assignment_3.R")
best("TX", "pneumonia")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
source("R_Progamming_Assignment_3.R")
best("BB", "heart attack")
best("NY", "hert attack")
is.integer
?is.integer
x <- 1:10
x[11]
x[0]
x[-1]
x[5000]
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart attack", "worst")
x <- 1:10
length(x)
x[length(x)]
x <- 70:820
length(x)
x[length(x)]
x <- cbind(1:10,70:80)
x <- 1:10
y <- 71:80
z <- cbind(x,y)
z
length(z)
length(z$x)
z$x
z[10,1]
z[1,]
z[,1]
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
?rbind
?distinct
outcome_data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
outcome_data$State
distinct(outcome_data$State)
unique(outcome_data$State)
source("rankall.R")
head(rankall("heart attack", 20), 10)
?data.frame
hospital <- "NAME"
state <- "ST"
data.frame(hospital = hospital, state = state)
source("rankall.R")
head(rankall("heart attack", 20), 10)
?sort
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("best.R")
source("rankall.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
data <- read.csv("getdata_data_ss06hid.csv")
setwd("~/Github/datasciencecoursera/Getting_Cleaning_Data/Week_1")
source('~/Github/datasciencecoursera/Getting_Cleaning_Data/Week_1/Week_1_Quiz.R', echo=TRUE)
head(data)
values <- data$VAL
head(values)
values[x == 24]
values[values == 24]
sum(values[values == 24], na.rm=TRUE)
data %>% filter(VAL == 24) %>% nrow()
1272/53
one <- sum(values[values==24], na.rm=TRUE)/24
one
head(data$FES)
?xlsx
library(readxl)
?read_excel
d <- read_xlsx("getdata_data_DATA.gov_NGAP.xlsx", range="G18:O23")
d
# For number 3, we import an xlsx file. For this we use the 'readxl'
# package.
dat <- read_xlsx("getdata_data_DATA.gov_NGAP.xlsx", range="G18:O23")
three <- sum(dat$Zip*dat$Ext,na.rm=T)
three
?read_xml
library(xml2)
# For number 4, we are reading in an xml file from the internet:
four_data <- read_xml("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
head(fourdata)
head(four_data)
# For number 4, we are reading in an xml file from the internet:
four_data <- xmlTreeParse(
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",
useInternal=TRUE)
library(XML)
# For number 4, we are reading in an xml file from the internet:
four_data <- xmlTreeParse(
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",
useInternal=TRUE)
?xpath
?xpathSapply
?xpathSApply
library(xml2)
?xml2_example
head(four_data)
four_data$doc
?read_xml
four_data$node
library(XML)
install.packages(XML)
install.packages("XML")
library(XML)
?xmlTreeParse
library(XML)
# For number 4, we are reading in an xml file from the internet:
four_data <-xmlTreeParse(
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",
useInternalNodes = TRUE)
# For number 4, we are reading in an xml file from the internet:
four_data <-xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",
useInternalNodes = TRUE)
?xmlParse
# For number 4, we are reading in an xml file from the internet:
four_data <-xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
# For number 4, we are reading in an xml file from the internet:
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
?isURL
four_data <-xmlParse(fileurl)
# For number 4, we are reading in an xml file from the internet:
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
four_data <-xmlParse(fileurl)
four_data <-xmlParse(fileurl, isURL = TRUE)
library(RCurl)
install.packages("RCurl")
library(RCurl)
tabs = getURL(fileurl)
four_data <- xmlParse(fileurl, isURL=TRUE)
# For number 4, we are reading in an xml file from the internet:
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
four_data <-xmlParse(fileurl, isURL = TRUE)
library(RCurl)
furl <- getURL(fileurl)
four_data <-xmlParse(furl, isURL = TRUE)
four_data <-xmlParse(furl)
head(four_data)
four_data
rootNode <- xmlRoot(four_data)
xmlName(rootNode)
rootNode[[1]]
?xpathSApply
zips <- xpathSApply(rootNode, "//li[@class='zip']", xmlValue)
head(zips)
zips[[1]]
zips[1]
zips <- xpathSApply(rootNode, "//zipcode", xmlValue)
zips
head(zips[zips == 21231])
length(zips[zips == 21231])
length(zips)
four <-length(zips[zips == 21231])
four
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
?BiocManager
install.packages("BiocManager")
BiocManager::install("rhdf5")
?BiocUpgrade
