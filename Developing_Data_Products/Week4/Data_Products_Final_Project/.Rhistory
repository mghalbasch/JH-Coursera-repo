mutate(rank = order(order(percent, decreasing = TRUE))) %>%
filter(rank <= 5) %>%
mutate(title_text = strsplit(title_text, "General ")[[1]][2]) %>%
select(percent, year, title_text)
pol_data %>% group_by(year) %>%
mutate(rank = order(order(percent, decreasing = TRUE))) %>%
filter(rank <= 5 & year == 2014) %>%
mutate(title_text = strsplit(title_text, "General ")[[1]][2]) %>%
select(percent, year, title_text)
strsplit(pol_data$title_text)
strsplit(pol_data$title_text, "General ")
pol_data %>% group_by(year) %>%
mutate(rank = order(order(percent, decreasing = TRUE)),
title_text = sapply(title_text,
function(x) strsplit(x, "General ")[[1]][2])) %>%
filter(rank <= 5 & year == 2014) %>%
select(percent, year, title_text)
table(pol_data$title_text)
pol_data %>% filter(p > .3 & year == 2014)
pol_data %>% filter(percent > .3 & year == 2014)
pol_data %>% filter(year == 2014)
pol_data %>% filter(year == 2014) %>% mutate(title_text = gsub("^General ", "", title_text))
pol_data %>% group_by(year) %>%
mutate(rank = order(order(percent, decreasing = TRUE)),
title_text = gsub("^General ", "", title_text)) %>%
filter(rank <= 5) %>%
select(percent, year, title_text)
pol_data %>% group_by(year) %>%
mutate(rank = order(order(percent, decreasing = TRUE)),
title_text = gsub("^General ", "", title_text)) %>%
filter(rank <= 5 & year == 2014) %>%
select(percent, year, title_text)
cleaned_data %>% plot_ly(x = ~year, y = ~percent, color = ~title_text,
frame = ~year) %>%
add_lines()
pol_data %>% group_by(year) %>%
mutate(rank = order(order(percent, decreasing = TRUE)),
title_text = gsub("^General ", "", title_text)) %>%
filter(rank <= 5) %>%
select(percent, year, title_text) ->
cleaned_data
cleaned_data %>% plot_ly(x = ~year, y = ~percent, color = ~title_text,
frame = ~year) %>%
add_lines()
cleaned_data %>% plot_ly(x = ~year, y = ~percent, color = ~title_text,
frame = ~year, type = "scatter") %>%
cleaned_data %>% plot_ly(x = ~year, y = ~percent, color = ~title_text,
frame = ~year, type = "scatter") %>%
cleaned_data %>% plot_ly(x = ~year, y = ~percent, color = ~title_text,
frame = ~year, type = "scatter")
?plot_ly
cleaned_data %>% plot_ly(x = ~year, y = ~percent, color = ~title_text) %>%
add_lines()
cleaned_data %>% plot_ly(x = ~year, y = ~percent) %>%
add_lines()
cleaned_data %>% plot_ly(x = ~as.numeric(year), y = ~percent) %>%
add_lines()
cleaned_data %>% plot_ly(x = ~ts(year), y = ~percent) %>%
add_lines()
pol_data %>% group_by(year) %>%
mutate(rank = order(order(percent, decreasing = TRUE)),
title_text = gsub("^General ", "", title_text)) %>%
filter(rank <= 3) %>%
select(percent, year, title_text) ->
cleaned_data
cleaned_data %>% plot_ly(x = ~year, y = ~percent, color = ~title_text) %>%
add_lines()
?add_lines
cleaned_data %>% plot_ly(x = ~year, y = ~percent, color = ~title_text) %>%
add_paths()
cleaned_data %>% plot_ly(x = ~year, y = ~percent) %>%
add_paths()
cleaned_data %>% plot_ly(x = ~year, y = ~percent) %>%
add_segments()
p <- plot_ly(economics, x = ~date, y = ~uempmed)
add_paths(p)
class(date)
class(economics$date)
cleaned_data %>% plot_ly(x = ~as.Date(year), y = ~percent) %>%
add_lines()
class(cleaned_data$year)
?add_lines
cleaned_data %>% plot_ly(x = ~year, y = ~percent, mode = "markers") %>%
add_lines()
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, mode = "markers") %>%
add_lines()
cleaned_data %>% plot_ly(x = ~year, y = ~percent, mode = "markers") %>%
add_lines()
cleaned_data %>% plot_ly(x = ~factor(year), y = ~percent, mode = "markers") %>%
add_lines()
cleaned_data %>% plot_ly(x = ~year, y = ~percent, mode = "markers") %>%
add_lines(color = ~rank)
pol_data %>% group_by(year) %>%
mutate(rank = order(order(percent, decreasing = TRUE)),
title_text = gsub("^General ", "", title_text)) %>%
filter(rank <= 3) %>%
select(percent, year, title_text, rank) ->
cleaned_data
cleaned_data %>% plot_ly(x = ~year, y = ~percent, mode = "markers") %>%
add_lines(color = ~rank)
cleaned_data %>% plot_ly(x = ~rank, y = ~percent, mode = "markers") %>%
add_lines()
cleaned_data %>% plot_ly(x = ~year, y = ~percent,
color = ~factor(rank), mode = "markers") %>%
add_lines()
cleaned_data %>% plot_ly(x = ~time(year), y = ~percent,
color = ~factor(rank), mode = "markers") %>%
add_lines()
cleaned_data %>% plot_ly(x = ~time(year), y = ~percent,
mode = "markers") %>%
add_lines()
cleaned_data %>% plot_ly(x = ~time(year), y = ~percent,
mode = "markers", color = ~title_text) %>%
add_lines()
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent,
mode = "markers", color = ~title_text) %>%
add_lines()
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent,
mode = "markers", color = ~title_text)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent,
mode = "markers", color = ~title_text, type = "scatter")
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year)
pol_data %>% group_by(year) %>%
mutate(rank = order(order(percent, decreasing = TRUE)),
title_text = gsub("^General ", "", title_text)) %>%
filter(rank <= 5) %>%
select(percent, year, title_text, rank) ->
cleaned_data
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year)
pol_data %>% group_by(year) %>%
mutate(title_text = gsub("^General ", "", title_text)) %>%
select(percent, year, title_text) ->
cleaned_data
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", frame = ~year)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year,
size = ~1/rank)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year,
size = 1/~rank)
size = 1/as.numeric(~rank)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year,
size = 1/as.numeric(~rank))
)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year,
size = 1/as.numeric(~rank))
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year,
size = ~rank)
pol_data %>% group_by(year) %>%
mutate(rank = order(order(percent, decreasing = TRUE)),
title_text = gsub("^General ", "", title_text)) %>%
select(percent, year, title_text, rank) ->
cleaned_data
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year,
size = 1/~rank)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", color = ~title_text, frame = ~year,
size = ~rank)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", frame = ~year, size = ~rank)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
mode = "markers", frame = ~year, size = ~(1/rank))
?plot_ly
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
frame = ~year, size = ~(1/rank))
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
frame = ~year, size = ~(1/rank)) %>%
layout(showlegend = FALSE)
cleaned_data %>% plot_ly(x = ~title_text, y = ~percent, type = "scatter",
frame = ~year, size = ~(1/rank)) %>%
layout(showlegend = FALSE)
?cap_get_mip
library(quantmod)
?getSymbols
getSymbols(GOOGL)
getSymbols("GOOGL")
?getSymbols.yahoo
x <- getSymbols("GOOGL")
x
x <- getSymbols("GOOGL", src = "google")
x <- getSymbols("GOOGL")
plot(GOOGL)
GOOGL
symbols = c("GOOGL", "AMZN", "AAPL")
getSymbols(symbols)
df <- data("GOOGL")
df <- data(GOOGL)
GOOGL
?buildData
?getSymbols
getSymbols(symbols, auto.assign = FALSE)
getSymbols("GOOGL", auto.assign = FALSE)
s = "GOOGL"
df <- data.frame(getSymbols(s, auto.assign = FALSE))
df
class(df)
?rownames_to_column
df <- data.frame(getSymbols(s, auto.assign = FALSE)) %>%
rownames_to_column
df
df <- data.frame(getSymbols(s, auto.assign = FALSE)) %>%
rownames_to_column("Date")
head(df)
df %>% select(Date, ends_with("Close")) -> simple_df
simple_df
head(simple_df)
?rename
df %>% select(Date, s = ends_with("Close")) -> simple_df
df
s
df %>% select(Date, blah = ends_with("Close")) -> simple_df
head(simple_df)
df %>% select(Date, s = ends_with("Close")) -> simple_df
head(simple_df)
df %>% select(Date, ~s = ends_with("Close")) -> simple_df
df %>% select(Date, !s = ends_with("Close")) -> simple_df
get("GOOGL")
getSymbols(symbols)
get(s)
?parse
?eval
eval(s)
df <- get(s) %>% rownames_to_column("Date")
df <- data.frame(get(s)) %>% rownames_to_column("Date")
df
head(df)
df <- data.frame(get(s)) %>% rownames_to_column("Date") %>%
select(Date, eval(s) = ends_with("Close"))
df <- data.frame(get(s)) %>% rownames_to_column("Date") %>%
select(Date, !!s := ends_with("Close"))
df
head(df)
for(s in symbols){
df <- data.frame(get(s)) %>% rownames_to_column("Date") %>%
select(Date, !!s := ends_with("Close"))
if(s == symbols[1]){
stocks <- df
} else{
merge(stocks, df, by="Date")
}
}
stocks
head(stocks)
symbols = c("GOOGL", "AMZN", "AAPL")
getSymbols(symbols)
for(s in symbols){
df <- data.frame(get(s)) %>% rownames_to_column("Date") %>%
select(Date, !!s := ends_with("Close"))
if(s == symbols[1]){
stocks <- df
} else{
merge(stocks, df, by="Date")
}
}
stocks
?merge
merge(stocks, df, by="Date", all = TRUE)
for(s in symbols){
df <- data.frame(get(s)) %>% rownames_to_column("Date") %>%
select(Date, !!s := ends_with("Close"))
if(s == symbols[1]){
stocks <- df
} else{
merge(stocks, df, by="Date", all = TRUE)
}
}
stocks
head(stocks)
stocks <- NULL
for(s in symbols){
df <- data.frame(get(s)) %>% rownames_to_column("Date") %>%
select(Date, !!s := ends_with("Close"))
if(is.null(stocks)){
stocks <- df
} else{
merge(stocks, df, by="Date", all = TRUE)
}
}
head(stocks)
stocks <- NULL
for(s in symbols){
df <- data.frame(get(s)) %>% rownames_to_column("Date") %>%
select(Date, !!s := ends_with("Close"))
if(is.null(stocks)){
stocks <- df
} else{
stocks <- merge(stocks, df, by="Date", all = TRUE)
}
}
stocks
head(stocks)
?textInput
shiny::runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
?updateTextInput
?actionButton
?observe
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
?observe
?append
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
?textOutput
?h2
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
?observe
?observeEvent
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
append(NULL, "x")
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
?try
?tryCatch
?stop
x = 6
try(x < 5)
?reactiveValues
getSymbols("x")
getSymbols("blablab")
try(getSymbols("blablab"), TRUE)
x <- try(getSymbols("blablab"))
x
?tryCatch
tryCatch(getSymbols("blablab"), finally = NULL)
tryCatch(getSymbols("blablab"), finally = NULL) -> x
x
tryCatch(getSymbols("blablab"), finally = {data = NULL})
data
tryCatch(getSymbols("blablab"), finally = {data = 5})
data
?getSymbols
x <- getSymbols("GOOGL", auto.assign = FALSE)
head(x)
data.frame(x) %>% rownames_to_column("Date") %>%
select(Date, !!input$symbol := ends_with("Close"))
data.frame(x) %>% rownames_to_column("Date") %>%
select(Date, GOOGL := ends_with("Close"))
data.frame(x) %>% rownames_to_column("Date") %>%
select(Date, GOOGL := ends_with("Close")) -> df
cbind(NULL, df)
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
s = "GOOGL"
tryCatch({df = getSymbols(s, auto.assign = FALSE)},
finally = {df = NULL})
df
getSymbols(s, auto.assign = FALSE)
?tryCatch
tryCatch({df = getSymbols(s, auto.assign = FALSE)},
warning = function(w) {df = NULL}, finally = {})
df
tryCatch({blah = getSymbols(s, auto.assign = FALSE)},
warning = function(w) {df = NULL}, finally = {})
blah
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
is.null(df)
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
a <- c("GOOGL", "AAPL")
paste(a)
paste(a, sep = ", ")
paste(a, collapse = ", ")
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
tryCatch({df = getSymbols(blabaab, auto.assign = FALSE)},
warning = function(w) {df = NULL}, finally = {})
tryCatch({df = getSymbols("blabaab", auto.assign = FALSE)},
warning = function(w) {df = NULL}, finally = {})
df
getSymbols("blabababal")
tryCatch({df = getSymbols("blabaab", auto.assign = FALSE)},
error = function(e) {df = NULL}, finally = {})
is.null(df)
try({df = getSymbols(s, auto.assign = FALSE)}, silent = TRUE)
try({df = getSymbols(s, auto.assign = FALSE)}, silent = TRUE)
is.null(df)
df <- NULL
is.null(df)
try({df = getSymbols(s, auto.assign = FALSE)}, silent = TRUE)
is.null(df)
s
df <- NULL
try({df = getSymbols("blababa", auto.assign = FALSE)}, silent = TRUE)
is.null(df)
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
symbols = c("GOOGL", "AAPL")
df <- getSymbols(symbols[1], auto.assign = FALSE)
df <- data.frame(df) %>% rownames_to_column("Date") %>%
select(Date, !!s := ends_with("Close"))
v$data <- df
v <- list(symbols = symbols, data = NULL)
v$data <- df
df <- getSymbols(symbols[2], auto.assign = FALSE)
df <- data.frame(df) %>% rownames_to_column("Date") %>%
select(Date, !!s := ends_with("Close"))
v$data <- merge(v$data, df, by="Date", all = TRUE)
head(v$data)
symbols[2]
head(df)
df <- getSymbols(symbols[2], auto.assign = FALSE)
head(df)
df <- data.frame(df) %>% rownames_to_column("Date") %>%
select(Date, !!s := ends_with("Close"))
head(df)
df
head(df)
ggplot(df) + geom_line(aes(x = Date, y = !!symbols[1]))
ggplot(df) + geom_line(aes(x = as.Date(Date), y = !!symbols[1]))
ggplot(df) + geom_line(aes(x = as.Date(Date), y = vars(!!symbols[1])))
melt(df, id.vars = "Date")
library(tidyverse)
melt(df, id.vars = "Date")
library(reshape2)
melt(df, id.vars = "Date")
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
head(df)
df %>% mutate(Date = as.Date(Date))
df %>% mutate(Date = as.POSIXct(Date)) %>% head
2007 < df$Date[2] < 2008
2007 < df$Date[2]
2007 > df$Date[2]
2010 > df$Date[2]
2006 < df$Date[2]
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
?inputSlider
?sliderInput
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
as.POSIXct(2014)
as.POSIXct("2014")
?as.POSIXct
as.POSIXct("2014", format = "Y")
as.POSIXct("2014", format = "%Y")
"2014" < df$Date[2]
"2014" > df$Date[2]
"2014" >= df$Date[2]
"2014" <= df$Date[2]
df$Date[2]
df$Date[2] >= "2014"
df$Date[2] >= "2007" & df$Date[2] <= "2019"
head(df)
year_lower = 2014
year_higher = 2019
df %>% mutate(Date = as.POSIXct(Date)) %>%
filter(Date >= year_lower & Date <= year_higher) %>%
melt(id.vars = "Date") %>%
ggplot(aes(x = Date, y = value, color = variable)) +
geom_line()
df %>% mutate(Date = as.POSIXct(Date)) %>%
filter(Date >= year_lower & Date <= year_higher) %>%
melt(id.vars = "Date") %>%
ggplot(aes(x = as.Date(Date), y = value, color = variable)) +
geom_line()
df
str(df)
2007 < df$Date[2]
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
knitr::opts_chunk$set(echo = FALSE)
df <- getSymbols("GOOG", auto.assign = FALSE)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
df %>% melt(id.vars = "Date") %>%
ggplot(aes(x = as.Date(Date), y = value, color = variable)) +
geom_line() +
xlab("Date") +
ylab("Closing Stock Price") +
labs(title = "Stock Prices Over Time") +
theme_minimal() +
scale_color_nejm()
head(df)
df <- data.frame(df) %>% rownames_to_column("Date") %>%
select(Date, GOOGL = ends_with("Close"))
df
head(df)
df %>% melt(id.vars = "Date") %>%
ggplot(aes(x = as.Date(Date), y = value, color = variable)) +
geom_line() +
xlab("Date") +
ylab("Closing Stock Price") +
labs(title = "Stock Prices Over Time") +
theme_minimal() +
scale_color_nejm()
df %>% melt(id.vars = "Date") %>%
ggplot(aes(x = as.Date(Date), y = value, color = variable)) +
geom_line() +
xlab("Date") +
ylab("Closing Stock Price") +
labs(title = "Stock Prices Over Time") +
theme_minimal() +
scale_color_nejm() +
theme(legend.title = element_blank())
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
runApp('Github/datasciencecoursera/Developing_Data_Products/Week4/Data_Products_Final_Project')
